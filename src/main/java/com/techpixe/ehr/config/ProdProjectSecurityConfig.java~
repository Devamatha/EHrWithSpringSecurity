package com.techpixe.ehr.config;


import com.techpixe.ehr.exceptionhandle.CustomAccessDeniedHandler;
import com.techpixe.ehr.exceptionhandle.CustomBasicAuthenticationEntryPoint;
import com.techpixe.ehr.filter.CsrfCookieFilter;
import com.techpixe.ehr.filter.JWTTokenGeneratorFilter;
import com.techpixe.ehr.filter.JWTTokenValidatorFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.password.CompromisedPasswordChecker;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.password.HaveIBeenPwnedRestApiPasswordChecker;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
import org.springframework.security.web.csrf.CookieCsrfTokenRepository;
import org.springframework.security.web.csrf.CsrfTokenRequestAttributeHandler;

import static org.springframework.security.config.Customizer.withDefaults;

@Configuration
public class ProdProjectSecurityConfig {
    @Bean
    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {
        //  http.authorizeHttpRequests((requests) -> requests.anyRequest().denyAll());
        // http.authorizeHttpRequests((requests) -> requests.anyRequest().permitAll();
        CsrfTokenRequestAttributeHandler csrfTokenRequestAttributeHandler = new CsrfTokenRequestAttributeHandler();
        http
                .sessionManagement(sessionConfig -> sessionConfig.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .csrf(csrf -> csrf.csrfTokenRequestHandler(csrfTokenRequestAttributeHandler).
                        ignoringRequestMatchers("/api/users/user", "/api/clients/login", "/api/clients/save").csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()))
                .addFilterAfter(new CsrfCookieFilter(), BasicAuthenticationFilter.class)
                //  .addFilterBefore(new RequestValidationBeforeFilter(), BasicAuthenticationFilter.class)
                // .addFilterAfter(new AuthoritiesLoggingAfterFilter(), BasicAuthenticationFilter.class)
                //  .addFilterAt(new AuthoritiesLoggingAtFilter(), BasicAuthenticationFilter.class)
                .addFilterAfter(new JWTTokenGeneratorFilter(), BasicAuthenticationFilter.class)
                .addFilterBefore(new JWTTokenValidatorFilter(), BasicAuthenticationFilter.class)
                .requiresChannel(rcc -> rcc.anyRequest().requiresInsecure()).
                authorizeHttpRequests(
                        (requests) -> requests.
//                                requestMatchers("/getCards", "/myAccount", "/myBalance", "/getLoans", "/getNotices").authenticated().
//
        requestMatchers("/api/JobDetails/addJob/1", "/api/JobDetails").authenticated().
//                                requestMatchers("/myAccount").hasAnyAuthority("VIEWACCOUNT", "VIEWCARDS").
//                                requestMatchers("/myBalance").hasAuthority("VIEWBALANCE").
//                                requestMatchers("/getLoans").hasAuthority("VIEWLOANS").
//                                requestMatchers("/getNotices").hasAuthority("VIEWNOTICES").
//                                requestMatchers("/getCards").hasRole("USER").
//                                requestMatchers("/myAccount").hasAnyRole("USER", "ADMIN").
//                                requestMatchers("/myBalance").hasRole("USER").
//                                requestMatchers("/getLoans").hasRole("USER").
//                                requestMatchers("/getNotices").hasRole("USER").
        requestMatchers("/api/users/user", "/api/clients/login", "/api/clients/save").permitAll());
        http.formLogin(withDefaults());
        http.httpBasic(hbc -> hbc.authenticationEntryPoint(new CustomBasicAuthenticationEntryPoint()));
        http.exceptionHandling(ehc -> ehc.accessDeniedHandler(new CustomAccessDeniedHandler()));
        http.httpBasic(withDefaults());
        //http.httpBasic(withDefaults());
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return PasswordEncoderFactories.createDelegatingPasswordEncoder();
    }

    @Bean
    public CompromisedPasswordChecker compromisedPasswordChecker() {
        return new HaveIBeenPwnedRestApiPasswordChecker();
    }

    @Bean
    public AuthenticationManager authenticationManager(UserDetailsService userDetailsService,
                                                       PasswordEncoder passwordEncoder) {
        System.out.println(userDetailsService + "userDetailsService");
        System.out.println(passwordEncoder + "passwordEncoder");
        UserNamePwdAuthenticationProvider authenticationProvider =
                new UserNamePwdAuthenticationProvider(userDetailsService, passwordEncoder);

        ProviderManager providerManager = new ProviderManager(authenticationProvider);
        providerManager.setEraseCredentialsAfterAuthentication(false);
        return providerManager;
    }
}
